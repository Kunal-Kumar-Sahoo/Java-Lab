* Characteristics in Java:
     - Descendent of C/C++ family
     - Simple: Easy to learn and code
     - Portable/Architectural-Neutral
     - Object Oriented
     - Secure
     - Robust: Does not allow user to write erroneous programs. It poses strict restrictions.
     - Multithreading
     - Interpreted (Just In Time) and High Performance
     - Distributed (Due to platform independence, it is readily usable)
     - Dynamic (We can have dynamic memory allocation with the help of 'new' keyword)

 * C/C++ program execution:
     .cpp -(via compiler)-> .obj(Machine level code) -(via linker)-> Executable code

 * Java program execution:
     .java -(javac)-> .class (Bytecode) -(JVM)-> Executable code; JVM is platform dependent
            compilation                 interpretation
    (Bytecode is not specific to any machine)

* JDK
    JDK (Java Development Kit)[
        javac, jar (Java archive), debugging tools, javap
        JRE (Java Runtime Environment)[
            java, javaw, libraries, rt.jar
            JVM (Java Virtual Machine)[
                Just In Time Compiler (JIT)
            ]
        ]
    ]

* Java Virtual Machine:
    - Makes Java platform independent
    - Provides a runtime environment to execute Java bytecode
    - Translates a single instruction from the Bytecode program to machine language line-by-line
    - When a java application is executed, an instance of JVM is loaded on to the RAM of the native machine and takes the responsibility of the execution.
    - JVM is not actually a hardware but resides in RAM whenever a Java code is to be executed.
    - Responsible to locate address of the modules (Address resolution)
    - Provides features such as:
        -> Automated exception handling
        -> Control loader (Load methods in the memory)
        -> Just-in-time compiler
        -> Byte-code verification

    - The internal architecture of the JVM
            class files -> class loader subsystem
                                ||
           [method area, heap, java stacks, pc registers, native method stacks]
                        (runtime data areas)
                                ||
                        Execution engine (Use runtime data areas to create executable file) <--> native method interface <-- native method libraries

    - Java heaps deals dynamic memory allocation ('new' keyword)
    - Java Stacks deals with static memory allocation (method calls)

* How JVM recognizes main() method?
